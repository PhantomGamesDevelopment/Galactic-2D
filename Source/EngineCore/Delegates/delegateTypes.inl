/**
* Galactic 2D
* (C) 2014 Phantom Games Development - All Rights Reserved
* delegateTypes.inl
* 
* This file defines macros and include symbols for delegate function & class signatures.
* 
* This C++ inline-header file has been automatically generated by the delegateTypesH_Generator program.
**/

//First though, ensure that only delegate.h loads this file.
#if !defined(GALACTIC_ONLYINCLUDEFROM_DELEGATECOMBONATIONS_H) || !defined(GALACTIC_INCLUDING_DELEGATETYPES_INL)
	#error "delegateTypes.inl is being loaded by a file that is not delegate.h, breaking"
#endif

//Define the base instances
#define DELEGATE_INSTANCE_CLASS COMBINEAB(DelegateInstance_, DELEGATE_FUNCTION_SUFFIX)
//Define Class Instances
/* Define Global Method Instances */
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs COMBINEAB(CPPGlobalMethodDelegateInstance_, DELEGATE_FUNCTION_SUFFIX)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_OneArg COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _OneArg)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_TwoArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _TwoArgs)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_ThreeArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _ThreeArgs)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_FourArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _FourArgs)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_FiveArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _FiveArgs)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_SixArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _SixArgs)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_SevenArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _SevenArgs)
#define DELEGATE_CPP_GLOBAL_METHOD_CLASS_EightArgs COMBINEAB(DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs, _EightArgs)

/* Define Class Method Instances */
#define DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs COMBINEAB(CPPClassMethodDelegateInstance_, DELEGATE_FUNCTION_SUFFIX)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _OneArg)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _TwoArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _ThreeArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _FourArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _FiveArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _SixArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _SevenArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs, _constant)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs, _EightArgs)
#define DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs_constant COMBINEAB(DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs, _constant)

/* Define Strong Pointer Instances */
#define DELEGATE_STRONGPOINTER_CLASS_ZeroArgs COMBINEAB(StrongPointerDelegateInstance_, DELEGATE_FUNCTION_SUFFIX)
#define DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_OneArg COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _OneArg)
#define DELEGATE_STRONGPOINTER_CLASS_OneArg_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_OneArg, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_TwoArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _TwoArgs)
#define DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_TwoArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_ThreeArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _ThreeArgs)
#define DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ThreeArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_FourArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _FourArgs)
#define DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_FourArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_FiveArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _FiveArgs)
#define DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_FiveArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_SixArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _SixArgs)
#define DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_SixArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_SevenArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _SevenArgs)
#define DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_SevenArgs, _constant)
#define DELEGATE_STRONGPOINTER_CLASS_EightArgs COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_ZeroArgs, _EightArgs)
#define DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant COMBINEAB(DELEGATE_STRONGPOINTER_CLASS_EightArgs, _constant)


//Define base delegate classes
#define DELEGATE_BASE_SINGLECAST_CLASS COMBINEAB(BaseDelegateCore_, DELEGATE_FUNCTION_SUFFIX)
#define DELEGATE_BASE_MULTICAST_CLASS COMBINEAB(BaseMulticastDelegateCore_, DELEGATE_FUNCTION_SUFFIX)
#define DELEGATE_MULTICAST_CLASS COMBINEAB(MulticastDelegateCoreInstance_, DELEGATE_FUNCTION_SUFFIX)

//Define argument definitions for instance classes.
/* Argument definitions for One Argument */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg Arg1
#define DELEGATE_TEMPLATE_ARGS_LIST_OneArg Arg1Type
#define DELEGATE_TEMPLATE_ARGS_PASS_OneArg Arg1Type Arg1
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg typename Arg1Type
/* Argument definitions for Two Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs Arg1, Arg2
#define DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs Arg1Type, Arg2Type
#define DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs Arg1Type Arg1, Arg2Type Arg2
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs typename Arg1Type, typename Arg2Type
/* Argument definitions for Three Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs Arg1, Arg2, Arg3
#define DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs Arg1Type, Arg2Type, Arg3Type
#define DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs Arg1Type Arg1, Arg2Type Arg2, Arg3Type Arg3
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs typename Arg1Type, typename Arg2Type, typename Arg3Type
/* Argument definitions for Four Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs Arg1, Arg2, Arg3, Arg4
#define DELEGATE_TEMPLATE_ARGS_LIST_FourArgs Arg1Type, Arg2Type, Arg3Type, Arg4Type
#define DELEGATE_TEMPLATE_ARGS_PASS_FourArgs Arg1Type Arg1, Arg2Type Arg2, Arg3Type Arg3, Arg4Type Arg4
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs typename Arg1Type, typename Arg2Type, typename Arg3Type, typename Arg4Type
/* Argument definitions for Five Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs Arg1, Arg2, Arg3, Arg4, Arg5
#define DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs Arg1Type, Arg2Type, Arg3Type, Arg4Type, Arg5Type
#define DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs Arg1Type Arg1, Arg2Type Arg2, Arg3Type Arg3, Arg4Type Arg4, Arg5Type Arg5
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs typename Arg1Type, typename Arg2Type, typename Arg3Type, typename Arg4Type, typename Arg5Type
/* Argument definitions for Six Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs Arg1, Arg2, Arg3, Arg4, Arg5, Arg6
#define DELEGATE_TEMPLATE_ARGS_LIST_SixArgs Arg1Type, Arg2Type, Arg3Type, Arg4Type, Arg5Type, Arg6Type
#define DELEGATE_TEMPLATE_ARGS_PASS_SixArgs Arg1Type Arg1, Arg2Type Arg2, Arg3Type Arg3, Arg4Type Arg4, Arg5Type Arg5, Arg6Type Arg6
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs typename Arg1Type, typename Arg2Type, typename Arg3Type, typename Arg4Type, typename Arg5Type, typename Arg6Type
/* Argument definitions for Seven Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7
#define DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs Arg1Type, Arg2Type, Arg3Type, Arg4Type, Arg5Type, Arg6Type, Arg7Type
#define DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs Arg1Type Arg1, Arg2Type Arg2, Arg3Type Arg3, Arg4Type Arg4, Arg5Type Arg5, Arg6Type Arg6, Arg7Type Arg7
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs typename Arg1Type, typename Arg2Type, typename Arg3Type, typename Arg4Type, typename Arg5Type, typename Arg6Type, typename Arg7Type
/* Argument definitions for Eight Arguments */
#define DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8
#define DELEGATE_TEMPLATE_ARGS_LIST_EightArgs Arg1Type, Arg2Type, Arg3Type, Arg4Type, Arg5Type, Arg6Type, Arg7Type, Arg8Type
#define DELEGATE_TEMPLATE_ARGS_PASS_EightArgs Arg1Type Arg1, Arg2Type Arg2, Arg3Type Arg3, Arg4Type Arg4, Arg5Type Arg5, Arg6Type Arg6, Arg7Type Arg7, Arg8Type Arg8
#define DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs typename Arg1Type, typename Arg2Type, typename Arg3Type, typename Arg4Type, typename Arg5Type, typename Arg6Type, typename Arg7Type, typename Arg8Type

/* Define Delegate Instancing Classes */
namespace Galactic {

	namespace Core {

		/*
		 Single-cast base delegate: Overrides and methods used by all instances of single-cast delegates
		*/
		template <DELEGATE_FUNCTION_TYPENAME_TEMPLATE_DEC> class DELEGATE_BASE_SINGLECAST_CLASS : public DelegateCore /*<>*/ {
			public: 
				/* Typedefs */
				//Type out a base-delegate instance
				typedef DELEGATE_INSTANCE_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> DelegateInterface;

				/* Template Class Declarations */

				/* Instances for Global Method Delegates */
				typedef DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> GlobalMethodDelegateClassInstance;
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class GlobalMethodDelegateClassInstance_OneArg : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_OneArg<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg> { public: GlobalMethodDelegateClassInstance_OneArg( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_OneArg<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_OneArg<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class GlobalMethodDelegateClassInstance_TwoArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_TwoArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs> { public: GlobalMethodDelegateClassInstance_TwoArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_TwoArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_TwoArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class GlobalMethodDelegateClassInstance_ThreeArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_ThreeArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs> { public: GlobalMethodDelegateClassInstance_ThreeArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_ThreeArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_ThreeArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class GlobalMethodDelegateClassInstance_FourArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_FourArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs> { public: GlobalMethodDelegateClassInstance_FourArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_FourArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_FourArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class GlobalMethodDelegateClassInstance_FiveArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_FiveArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs> { public: GlobalMethodDelegateClassInstance_FiveArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_FiveArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_FiveArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class GlobalMethodDelegateClassInstance_SixArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_SixArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs> { public: GlobalMethodDelegateClassInstance_SixArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_SixArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_SixArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class GlobalMethodDelegateClassInstance_SevenArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_SevenArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs> { public: GlobalMethodDelegateClassInstance_SevenArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_SevenArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_SevenArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class GlobalMethodDelegateClassInstance_EightArgs : public DELEGATE_CPP_GLOBAL_METHOD_CLASS_EightArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs> { public: GlobalMethodDelegateClassInstance_EightArgs( typename DELEGATE_CPP_GLOBAL_METHOD_CLASS_EightArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_CPP_GLOBAL_METHOD_CLASS_EightArgs<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs> ( trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };

				/* Instances for Class Method Delegates */
				template <class T> class ClassMethodDelegateClassInstance : public DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> { public: ClassMethodDelegateClassInstance(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>::methodPointer trgFunc ) : DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> (obj, trgFunc) { } };
				template <class T> class ClassMethodDelegateClassInstance_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> { public: ClassMethodDelegateClassInstance_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>::methodPointer trgFunc ) : DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> (obj, trgFunc) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class ClassMethodDelegateClassInstance_OneArg : public DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg> { public: ClassMethodDelegateClassInstance_OneArg(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class ClassMethodDelegateClassInstance_OneArg_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg> { public: ClassMethodDelegateClassInstance_OneArg_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class ClassMethodDelegateClassInstance_TwoArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs> { public: ClassMethodDelegateClassInstance_TwoArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class ClassMethodDelegateClassInstance_TwoArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs> { public: ClassMethodDelegateClassInstance_TwoArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class ClassMethodDelegateClassInstance_ThreeArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs> { public: ClassMethodDelegateClassInstance_ThreeArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class ClassMethodDelegateClassInstance_ThreeArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs> { public: ClassMethodDelegateClassInstance_ThreeArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class ClassMethodDelegateClassInstance_FourArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs> { public: ClassMethodDelegateClassInstance_FourArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class ClassMethodDelegateClassInstance_FourArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs> { public: ClassMethodDelegateClassInstance_FourArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class ClassMethodDelegateClassInstance_FiveArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs> { public: ClassMethodDelegateClassInstance_FiveArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class ClassMethodDelegateClassInstance_FiveArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs> { public: ClassMethodDelegateClassInstance_FiveArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class ClassMethodDelegateClassInstance_SixArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs> { public: ClassMethodDelegateClassInstance_SixArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class ClassMethodDelegateClassInstance_SixArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs> { public: ClassMethodDelegateClassInstance_SixArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class ClassMethodDelegateClassInstance_SevenArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs> { public: ClassMethodDelegateClassInstance_SevenArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class ClassMethodDelegateClassInstance_SevenArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs> { public: ClassMethodDelegateClassInstance_SevenArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class ClassMethodDelegateClassInstance_EightArgs : public DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs> { public: ClassMethodDelegateClassInstance_EightArgs(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class ClassMethodDelegateClassInstance_EightArgs_constant : public DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs> { public: ClassMethodDelegateClassInstance_EightArgs_constant(T *obj, typename DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };

				/* Instances for Strong Pointer Delegate <X, PointerModes::Determine> */
				template <class T> class StrongReferenceDelegateClassInstance : public DELEGATE_STRONGPOINTER_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::Determine>::methodPointer trgFunc ) : DELEGATE_STRONGPOINTER_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::Determine> (obj, trgFunc) { } };
				template <class T> class StrongReferenceDelegateClassInstance_constant : public DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::Determine>::methodPointer trgFunc ) : DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::Determine> (obj, trgFunc) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class StrongReferenceDelegateClassInstance_OneArg : public DELEGATE_STRONGPOINTER_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_OneArg(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_STRONGPOINTER_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class StrongReferenceDelegateClassInstance_OneArg_constant : public DELEGATE_STRONGPOINTER_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_OneArg_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_STRONGPOINTER_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class StrongReferenceDelegateClassInstance_TwoArgs : public DELEGATE_STRONGPOINTER_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_TwoArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_STRONGPOINTER_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class StrongReferenceDelegateClassInstance_TwoArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_TwoArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class StrongReferenceDelegateClassInstance_ThreeArgs : public DELEGATE_STRONGPOINTER_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_ThreeArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_STRONGPOINTER_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class StrongReferenceDelegateClassInstance_ThreeArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_ThreeArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class StrongReferenceDelegateClassInstance_FourArgs : public DELEGATE_STRONGPOINTER_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_FourArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_STRONGPOINTER_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class StrongReferenceDelegateClassInstance_FourArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_FourArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class StrongReferenceDelegateClassInstance_FiveArgs : public DELEGATE_STRONGPOINTER_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_FiveArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_STRONGPOINTER_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class StrongReferenceDelegateClassInstance_FiveArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_FiveArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class StrongReferenceDelegateClassInstance_SixArgs : public DELEGATE_STRONGPOINTER_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_SixArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_STRONGPOINTER_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class StrongReferenceDelegateClassInstance_SixArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_SixArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class StrongReferenceDelegateClassInstance_SevenArgs : public DELEGATE_STRONGPOINTER_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_SevenArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_STRONGPOINTER_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class StrongReferenceDelegateClassInstance_SevenArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_SevenArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class StrongReferenceDelegateClassInstance_EightArgs : public DELEGATE_STRONGPOINTER_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_EightArgs(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_STRONGPOINTER_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class StrongReferenceDelegateClassInstance_EightArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::Determine> { public: StrongReferenceDelegateClassInstance_EightArgs_constant(const StrongReference<T, PointerModes::Determine> &obj, typename DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::Determine>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::Determine> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };

				/* Instances for Strong Pointer Delegate <X, PointerModes::ThreadSafe> */
				template <class T> class TSStrongReferenceDelegateClassInstance : public DELEGATE_STRONGPOINTER_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::ThreadSafe>::methodPointer trgFunc ) : DELEGATE_STRONGPOINTER_CLASS_ZeroArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::ThreadSafe> (obj, trgFunc) { } };
				template <class T> class TSStrongReferenceDelegateClassInstance_constant : public DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::ThreadSafe>::methodPointer trgFunc ) : DELEGATE_STRONGPOINTER_CLASS_ZeroArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, PointerModes::ThreadSafe> (obj, trgFunc) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class TSStrongReferenceDelegateClassInstance_OneArg : public DELEGATE_STRONGPOINTER_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_OneArg(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_STRONGPOINTER_CLASS_OneArg<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> class TSStrongReferenceDelegateClassInstance_OneArg_constant : public DELEGATE_STRONGPOINTER_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_OneArg_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_OneArg) : DELEGATE_STRONGPOINTER_CLASS_OneArg_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_OneArg, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class TSStrongReferenceDelegateClassInstance_TwoArgs : public DELEGATE_STRONGPOINTER_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_TwoArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_STRONGPOINTER_CLASS_TwoArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> class TSStrongReferenceDelegateClassInstance_TwoArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_TwoArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) : DELEGATE_STRONGPOINTER_CLASS_TwoArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class TSStrongReferenceDelegateClassInstance_ThreeArgs : public DELEGATE_STRONGPOINTER_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_ThreeArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_STRONGPOINTER_CLASS_ThreeArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> class TSStrongReferenceDelegateClassInstance_ThreeArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_ThreeArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) : DELEGATE_STRONGPOINTER_CLASS_ThreeArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class TSStrongReferenceDelegateClassInstance_FourArgs : public DELEGATE_STRONGPOINTER_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_FourArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_STRONGPOINTER_CLASS_FourArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> class TSStrongReferenceDelegateClassInstance_FourArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_FourArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) : DELEGATE_STRONGPOINTER_CLASS_FourArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class TSStrongReferenceDelegateClassInstance_FiveArgs : public DELEGATE_STRONGPOINTER_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_FiveArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_STRONGPOINTER_CLASS_FiveArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> class TSStrongReferenceDelegateClassInstance_FiveArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_FiveArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) : DELEGATE_STRONGPOINTER_CLASS_FiveArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class TSStrongReferenceDelegateClassInstance_SixArgs : public DELEGATE_STRONGPOINTER_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_SixArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_STRONGPOINTER_CLASS_SixArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> class TSStrongReferenceDelegateClassInstance_SixArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_SixArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) : DELEGATE_STRONGPOINTER_CLASS_SixArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class TSStrongReferenceDelegateClassInstance_SevenArgs : public DELEGATE_STRONGPOINTER_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_SevenArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_STRONGPOINTER_CLASS_SevenArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> class TSStrongReferenceDelegateClassInstance_SevenArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_SevenArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) : DELEGATE_STRONGPOINTER_CLASS_SevenArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class TSStrongReferenceDelegateClassInstance_EightArgs : public DELEGATE_STRONGPOINTER_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_EightArgs(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_STRONGPOINTER_CLASS_EightArgs<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> class TSStrongReferenceDelegateClassInstance_EightArgs_constant : public DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::ThreadSafe> { public: TSStrongReferenceDelegateClassInstance_EightArgs_constant(const StrongReference<T, PointerModes::ThreadSafe> &obj, typename DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::ThreadSafe>::methodPointer trgFunc , DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) : DELEGATE_STRONGPOINTER_CLASS_EightArgs_constant<T, DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs, PointerModes::ThreadSafe> (obj, trgFunc, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs) { } };

				/* Constructor / Destructor */
				//Default Constructor
				inline DELEGATE_BASE_SINGLECAST_CLASS() : DelegateCore(NULL) { }
				//Copy Constructor (From any instance)
				inline DELEGATE_BASE_SINGLECAST_CLASS(DelegateInterface *delInterface) : DelegateCore(delInterface) { }
				//Copy Constructor (From similar instance)
				inline DELEGATE_BASE_SINGLECAST_CLASS(const DELEGATE_BASE_SINGLECAST_CLASS &c) : DelegateCore(NULL) {
					*this = c;
				}
				//Destructor
				inline ~DELEGATE_BASE_SINGLECAST_CLASS() {
					unbindDelegate();
				}

				/* Public Class Methods */
				/* Create methods for C++ Global Method Declarations */
				static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance::createInstance(mthd));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_OneArg<DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_OneArg<DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_TwoArgs<DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_TwoArgs<DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_ThreeArgs<DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_ThreeArgs<DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_FourArgs<DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_FourArgs<DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_FiveArgs<DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_FiveArgs<DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_SixArgs<DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_SixArgs<DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_SevenArgs<DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_SevenArgs<DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createGlobalMethodDelegate(typename GlobalMethodDelegateClassInstance_EightArgs<DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(GlobalMethodDelegateClassInstance_EightArgs<DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				/* Create methods for C++ Class Method Declarations */
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance<T>::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance<T>::createInstance(trgObj, mthd));
				}
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_constant<T>::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_constant<T>::createInstance(trgObj, mthd));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate(T* trgObj, typename ClassMethodDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createMemberMethodDelegate_const(T* trgObj, typename ClassMethodDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(ClassMethodDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				/* Create methods for StrongReference Instances */
				/* Methods For StrongReference<X, PointerModes::Determine> */
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance<T>::createInstance(trgObj, mthd));
				}
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_constant<T>::createInstance(trgObj, mthd));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				/* Methods For StrongReference<X, PointerModes::ThreadSafe> */
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance<T>::createInstance(trgObj, mthd));
				}
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_constant<T>::createInstance(trgObj, mthd));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS>(TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::createInstance(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
				}
				/* Methods For Object- > StrongReference<X, PointerModes::Determine> */
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd);
				}
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate(T* trgObj, typename StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return createStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createStrongReferenceDelegate_const(T* trgObj, typename StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return createStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				/* Methods For Object- > StrongReference<X, PointerModes::ThreadSafe> */
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd);
				}
				template<class T> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate(T* trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return createTSStrongReferenceDelegate(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template<class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> createTSStrongReferenceDelegate_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					return createTSStrongReferenceDelegate_const(StaticCastStrongReference<T>(trgObj->becomeStrongRef()), mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}

				/* This next block of methods are responsible for binding the delegate instance to the delegate class itself. You are responsible for 
				ensuring that these delegate instances are still valid at any given moment. It is recommended to use object validation checks prior to calls 
				to the delegate's exec() method. */
				/* Delegate Bind Methods for C++ Global Methods */
				inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance::methodPointer mthd) {
					*this = createGlobalMethodDelegate(mthd);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_OneArg<DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_TwoArgs<DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_ThreeArgs<DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_FourArgs<DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_FiveArgs<DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_SixArgs<DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_SevenArgs<DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindGlobalMethod(typename GlobalMethodDelegateClassInstance_EightArgs<DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				/* Delegate Bind Methods for C++ Class Methods */
				template <class T> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance<T>::methodPointer mthd) {
					*this = createMemberMethodDelegate(trgObj, mthd);
				}
				template <class T> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_constant<T>::methodPointer mthd) {
					*this = createMemberMethodDelegate_const(trgObj, mthd);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindMemberMethod(T* trgObj, typename ClassMethodDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindMemberMethod_const(T* trgObj, typename ClassMethodDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createMemberMethodDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				/* Delegate Bind Methods for StrongReference<X, PointerModes::Determine> */
				template <class T> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					*this = createStrongReferenceDelegate(trgObj, mthd);
				}
				template <class T> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindStrongReference(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindStrongReference_const(const StrongReference<T, PointerModes::Determine> &trgObj, typename StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				/* Delegate Bind Methods for StrongReference<X, PointerModes::ThreadSafe> */
				template <class T> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd);
				}
				template <class T> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindTSStrongReference(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindTSStrongReference_const(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				/* Delegate Bind Methods for Object -> StrongReference<X, PointerModes::Determine> */
				template <class T> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					*this = createStrongReferenceDelegate(trgObj, mthd);
				}
				template <class T> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindStrongReference(T* trgObj, typename StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindStrongReference_const(T* trgObj, typename StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				/* Delegate Bind Methods for Object -> StrongReference<X, PointerModes::ThreadSafe> */
				template <class T> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd);
				}
				template <class T> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindTSStrongReference(T* trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}
				template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> inline void bindTSStrongReference_const(T* trgObj, typename TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
					*this = createTSStrongReferenceDelegate_const(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs);
				}

				/* The remaining methods in this class are common delegate asset methods, define them here */
				//Execute the delegate, an error will occur if you call this on an unbound delegate, hence call bound() first.
				inline DelegateReturnType exec(DELEGATE_PARAM_LIST) const {
					DelegateInterface *dInterface = (DelegateInterface *)fetchDInstance();
					if(dInterface == NULL) {
						//ToDo: Insert an asset here for an invalid call. If support for blocking comes in C++11/14, insert it here.
					}
					return dInterface->exec(DELEGATE_PARAM_ASSIGN);
				}

				#if DELEGATE_FUNCTION_IS_VOID
					//Safer version of exec() for void functions...
					inline bool execIfDelegateBound() const {
						if(bound()) {
							return ((DelegateInterface *)fetchDInstance())->execIfPoss(DELEGATE_PARAM_ASSIGN);
						}
						return false
					}
				#endif

				/* Operators */
				//Assignment Operator
				inline DELEGATE_BASE_SINGLECAST_CLASS& operator=(const DELEGATE_BASE_SINGLECAST_CLASS &c) {
					if(&c != this) {
						DelegateInterface *dInterface = (DelegateInterface *)c.fetchDInstance();
						if(dInterface != NULL) {
							applyNewDInstance(dInterface);
							return *this;
						}
						applyNewDInstance(NULL);
					}
					return *this;
				}

				//Equality Operator
				inline bool operator==(const DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> &c) {
					DelegateInterface *dInt1 = (DelegateInterface *)fetchDInstance();
					DelegateInterface *dInt2 = (DelegateInterface *)c.fetchDInstance();
					if(dInt1 == NULL && dInt2 == NULL) {
						return true;
					}
					else {
						if(dInt1 != NULL && dInt2 != NULL) {
							return dInt1->boundToSameFunc(*dInt2);
						}
						return false;
					}
				}

			private:
				/* Grant Friend Access To Multi-cast Base */
				template <DELEGATE_FUNCTION_ALTERNATE_TEMPLATE_DEC> friend class DELEGATE_BASE_MULTICAST_CLASS;
		}; 

		#if DELEGATE_FUNCTION_IS_VOID
			/*
			 Multi-cast base delegate: Overrides and methods used by all instances of multi-cast delegates
			*/
			template <DELEGATE_FUNCTION_TYPENAME_TEMPLATE_DEC> class DELEGATE_BASE_MULTICAST_CLASS : public MulticastDelegateCore /*<>*/ {
				public:
					/* Typedefs */
					//Definition for single-cast instance to be inserted into the multi-cast array
					typedef DELEGATE_BASE_SINGLECAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> SingleCastDelegateInstance;
					//Definition for delegate instance overloads
					typedef DELEGATE_INSTANCE_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> DelegateInterface;

					/* Public Class Methods */
					/* Methods to add a single-cast delegate to the multi-cast list */
					/* Add methods for Global Methods */
					inline void addGlobalMethod(typename SingleCastDelegateInstance::GlobalMethodDelegateClassInstance::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd)); 
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_OneArg<DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_TwoArgs<DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_ThreeArgs<DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_FourArgs<DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_FiveArgs<DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_SixArgs<DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_SevenArgs<DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addGlobalMethod(typename SingleCastDelegateInstance::template GlobalMethodDelegateClassInstance_EightArgs<DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					/* Add methods for Class Methods */
					template <class T> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_ZeroArgs<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd));
					}
					template <class T> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_ZeroArgs_constant<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addClassMethod(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					/* Add methods for StrongReference<X, PointerModes::Determine> */
					template <class T> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ZeroArgs<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ZeroArgs_constant<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addStrongPointer(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					/* Add methods for StrongReference<X, PointerModes::ThreadSafe> */
					template <class T> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ZeroArgs<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ZeroArgs_constant<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addTSStrongPointer(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					/* Add methods for Object -> StrongReference<X, PointerModes::Determine> */
					template <class T> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ZeroArgs<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ZeroArgs_constant<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					/* Add methods for Object -> StrongReference<X, PointerModes::ThreadSafe> */
					template <class T> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ZeroArgs<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ZeroArgs_constant<T>::methodPointer mthd) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_OneArg<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_OneArg_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_OneArg>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_OneArg) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_TwoArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_TwoArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ThreeArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_ThreeArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FourArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FourArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FourArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FourArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FiveArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_FiveArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SixArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SixArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SixArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SixArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SevenArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_SevenArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_EightArgs<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}
					template <class T, DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs> static inline void addTSStrongPointer(T *trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_EightArgs_constant<T, DELEGATE_TEMPLATE_ARGS_LIST_EightArgs>::methodPointer mthd, DELEGATE_TEMPLATE_ARGS_PASS_EightArgs) {
						addDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd, DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs));
					}

					/* Methods to remove a single-cast delegate from the multi-cast list */
					/* Remove method for Global Method Delegates */
					inline void killGlobalMemberDelegate(typename SingleCastDelegateInstance::GlobalMethodDelegateClassInstance::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createGlobalMethodDelegate(mthd));
					}
					/* Remove methods for Class Method Delegates */
					template <class T> inline void killClassMethodDelegate(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd));
					}
					template <class T> inline void killClassMethodDelegate(T* trgObj, typename SingleCastDelegateInstance::template ClassMethodDelegateClassInstance_constant<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createMemberMethodDelegate(trgObj, mthd));
					}
					/* Remove methods for Strong Reference Delegates */
					/* Remove methods for StrongReference<X, PointerModes::Determine> */
					template <class T> inline void killStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> inline void killStrongReferenceDelegate(const StrongReference<T, PointerModes::Determine> &trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					/* Remove methods for StrongReference<X, PointerModes::ThreadSafe> */
					template <class T> inline void killTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> inline void killTSStrongReferenceDelegate(const StrongReference<T, PointerModes::ThreadSafe> &trgObj, typename SingleCastDelegateInstance::template TSStrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					/* Remove methods for Object -> StrongReference<X, PointerModes::Determine> */
					template <class T> inline void killStrongReferenceDelegate(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> inline void killStrongReferenceDelegate(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createStrongReferenceDelegate(trgObj, mthd));
					}
					/* Remove methods for Object -> StrongReference<X, PointerModes::ThreadSafe> */
					template <class T> inline void killTSStrongReferenceDelegate(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}
					template <class T> inline void killTSStrongReferenceDelegate(T *trgObj, typename SingleCastDelegateInstance::template StrongReferenceDelegateClassInstance_constant<T>::methodPointer mthd) {
						killDelegate(SingleCastDelegateInstance::createTSStrongReferenceDelegate(trgObj, mthd));
					}

					/* Support Methods for Public Class Methods */
					//Generic Delegate Add Method...
					void addDelegate(DelegateInterface *dInst) {
						if(dInst != NULL) {
							addToMCList(dInst);
						}
					}
					//Generic Delegate Kill Method...
					void killDelegate(const DelegateInterface &dInst) {
						removeFromMCList(dInst);
					}

				protected:
					/* Protected Class Methods */
					//Add Delegate To List
					void addToMCList(DelegateInterface *dInst) {
						//Note: It may be beneficial to add a test at some point to validate the method being added is unique, but for now, we're fine!
						addDelegateInstance(dInst);
					}
					//Remove Delegate From List
					void removeFromMCList(const DelegateInterface *dInst) {
						const DynArray<DelegateInterface *> &mcList = fetchDelegateList();
						for (DelegateInterface *it = mcList.end(); it != mcList.begin(); it--) {
							//Check for the function of interest here...
							if(it != NULL && it->boundToSameFunc(*dInst)) {
								//There can only be one function of this type in the list, so delete, then break.
								SendToHell(it);
								break;
							}
						}
					}
					//Issue a broadcast command to order all delegates in the list to execute.
					void broadcast() const {
						const DynArray<DelegateInterface *> &mcList = fetchDelegateList();
						incLocks();
						for (DelegateInterface *it = mcList.end(); it != mcList.begin(); it--) {
							if(it != NULL || !it->execIfPoss(DELEGATE_PARAM_ASSIGN)) {
								const_cast<DELEGATE_BASE_MULTICAST_CLASS *>(this)->forceClean();
							}
						}
						decLocks();
						const_cast<DELEGATE_BASE_MULTICAST_CLASS *>(this)->performCleaning();
					}

					/* Hidden Constructors */
					inline DELEGATE_BASE_MULTICAST_CLASS() { }
			};

			/*
			 Multicast Delegate: Overrides and methods directly used by multicast instances
			*/
			template <DELEGATE_FUNCTION_TYPENAME_TEMPLATE_DEC> class DELEGATE_MULTICAST_CLASS : public DELEGATE_BASE_MULTICAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> {
				public:
					/* Public Class Methods */
					//Issue a broadcast to execute all delegates attached to this multicast instance
					inline void broadcast(DELEGATE_PARAM_LIST) const {
						return Parent::broadcast(DELEGATE_PARAM_ASSIGN);
					}

					//Check if this multicast instance is bound
					inline bool bound() const {
						return Parent::bound();
					}

					//Empty the delegate list from this multicast instance
					inline void empty() {
						Parent::empty();
					}

				private:
					//Define the parent instance of this class, this is used to prevent invalid calls to existing methods.
					typedef DELEGATE_BASE_MULTICAST_CLASS<DELEGATE_FUNCTION_TEMPLATE_ARGUMENTS> Parent;
			};

		#endif

	};

};

//Undefine Macros...
//Undefine Template Lists
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_OneArg
#undef DELEGATE_TEMPLATE_ARGS_LIST_OneArg
#undef DELEGATE_TEMPLATE_ARGS_PASS_OneArg
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_OneArg
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_TwoArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_TwoArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_TwoArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_TwoArgs
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_ThreeArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_ThreeArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_ThreeArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_ThreeArgs
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FourArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_FourArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_FourArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_FourArgs
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_FiveArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_FiveArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_FiveArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_FiveArgs
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SixArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_SixArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_SixArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_SixArgs
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_SevenArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_SevenArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_SevenArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_SevenArgs
#undef DELEGATE_TEMPLATE_ARGS_PASSTOFUNC_EightArgs
#undef DELEGATE_TEMPLATE_ARGS_LIST_EightArgs
#undef DELEGATE_TEMPLATE_ARGS_PASS_EightArgs
#undef DELEGATE_TEMPLATE_ARGS_DECLARATION_EightArgs
//Undefine Base Instance Classes
#undef DELEGATE_INSTANCE_CLASS
#undef DELEGATE_BASE_SINGLECAST_CLASS
#undef DELEGATE_BASE_MULTICAST_CLASS
#undef DELEGATE_MULTICAST_CLASS
//Undefine Method Argument Lists...
#undef DELEGATE_STRONGPOINTER_CLASS_ZeroArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_ZeroArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_ZeroArgs
#undef DELEGATE_STRONGPOINTER_CLASS_OneArg
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_OneArg
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_OneArg
#undef DELEGATE_STRONGPOINTER_CLASS_TwoArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_TwoArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_TwoArgs
#undef DELEGATE_STRONGPOINTER_CLASS_ThreeArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_ThreeArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_ThreeArgs
#undef DELEGATE_STRONGPOINTER_CLASS_FourArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_FourArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_FourArgs
#undef DELEGATE_STRONGPOINTER_CLASS_FiveArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_FiveArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_FiveArgs
#undef DELEGATE_STRONGPOINTER_CLASS_SixArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_SixArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_SixArgs
#undef DELEGATE_STRONGPOINTER_CLASS_SevenArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_SevenArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_SevenArgs
#undef DELEGATE_STRONGPOINTER_CLASS_EightArgs
#undef DELEGATE_CPP_CLASS_METHOD_CLASS_EightArgs
#undef DELEGATE_CPP_GLOBAL_METHOD_CLASS_EightArgs
//End Of File...