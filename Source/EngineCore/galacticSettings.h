/**
* Galactic 2D
* Source/EngineCore/galacticSettings.h
* Global engine settings and definitions
* (C) 2014-2015 Phantom Games Development - All Rights Reserved
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
**/

//GALACTIC_VERSION_MAJOR, GALACTIC_VERSION_MINOR, GALACTIC_VERSION_REVISION, GALACTIC_VERSION_NUMBER
/**
	These three define tags are used to define the engine build for G2D. The string generated by this field is included in a 
	definition located below the following three fields named GALACTIC_VERSION_NUMBER. This field is used in a few places in the engine and
	is mainly used to validate that client executables should be matching that of the server and other clients in the game.
**/

#define GALACTIC_VERSION_MAJOR 1
#define GALACTIC_VERSION_MINOR 0
#define GALACTIC_VERSION_REVISION 0
//
#define GALACTIC_VERSION_NUMBER ((GALACTIC_VERSION_MAJOR * 1000) + (GALACTIC_VERSION_MINOR * 100) + GALACTIC_VERSION_REVISION)

//GALACTIC_BINARY_BUILD:
/**
	This define is used to define wheter or not the engine builds in a simply binary only executable file.
	If you have access to this file, you should define this as 0 and then directly create your game classes 
	through the engine itself, rather than building an external module

	Defining GALACTIC_BINARY_BUILD allows usage of the -game tag, whereas setting this to 0 will override the tag
	and simply load the game by finding a generic main.lua file.
**/
#define GALACTIC_BINARY_BUILD 1

//GALACTIC_SCRIPTING_LANGUAGE
/*
	This define tells the engine which scripting module to load in the Console folder. Please don't touch this define unless you know what
	you're doing as this controls a large amount of internal systems and functions.
*/
#define GALACTIC_SCRIPTING_LANGUAGE "LUA"

//GALACTIC_SCRIPT_ENTRY
/**
	This is a simple define used by the engine to tell it what file serves as the entry point for the script
	side of the engine. By default this is Main.lua.
**/
#define GALACTIC_SCRIPT_ENTRY "Main.lua"

//GALACTIC_DYNARRAY_RESIZE_BLOCK_SIZE
/**
	This define controls the amount of blocks to resize a dynamically allocated array DynArray<X> by whenever it needs to expand it's bounds. Ideally, you
	should pick a divisible byte factor of 2, that isn't too small, but not too large. Smaller values will increase size precision at the cost of performance
	and larger values will occupy more memory, but give you increased performance. You should factor the requirements of your program when choosing this value.
	By default, we choose a "mid-Range" to smaller value of 16 here.
**/
#define GALACTIC_DYNARRAY_RESIZE_BLOCK_SIZE 16

//GALACTIC_DISABLE_MULTITHREADING
/**
	This define forces the engine to run in single-threaded mode, even if there is no -noMThreads command line parameter
	on the executable. This should only be enabled if you're targeting very old stuff that for some reason doesn't support multi-threading.
**/
#define GALACTIC_DISABLE_MULTITHREADING 0

//GALACTIC_THREADSAFE_STRONGPTRS
/**
	This define controls whether or not our strongReference classes must be thread safe at all times. You should consider performance gains/losses for 
	this setting, also, be aware that you should only ever use this define if you're running a hyperfast computer that can handle parallel code
	execution without any performance hits. You should leave this define as 0 for builds of products being launched to unknown platforms
**/
#define GALACTIC_THREADSAFE_STRONGPTRS 0

//GALACTIC_MAXIMUM_WORKING_THREADS
/**
	This define declares to the platform module how many thread objects to spawn for the instance of the application. Idealy, this
	should be a value that is between 4 and 16. Game instances should define this to be a smaller number, where applications should
	define this to be a larger number. The engine itself defines this by default as 8.
**/
#define GALACTIC_MAXIMUM_WORKING_THREADS 8

//GALACTIC_THREAD_DEFAULT_STACKSIZE
/*
	This define is used to declare the default amount of space needed by the threading system on the stack by the engine. This value should
	typically be on a power of 2 and not too significant, but also not too small to limit the system. By default this is specified as a value
	of 32K, or 2^15.
*/
#define GALACTIC_THREAD_DEFAULT_STACKSIZE 32768

//GALACTIC_AFFINITY_MANAGER_THREADCOUNT
/*
	This define is used on the platform module to declare how many threads will have their information for an affinity mask stored in the engine.
	You should choose this value carefully depending on the definition of GALACTIC_MAXIMUM_WORKING_THREADS, as well as the platforms being targeted
	as this module is only active on the Android platform. The default value for this is 32.
*/
#define GALACTIC_AFFINITY_MANAGER_THREADCOUNT 32

//GALACTIC_USE_NETWORKING
/**
	This define can (and should) be used by software developers seeking to use Galactic 2D to develop non-game software that
	needs the cross-platform rendering & sound libraries and functions that Galatic 2D has to offer. By disabling this flag the
	engine will disable the ENet module in the engine, and in extension, remove all "multiplayer" compatibilities of the engine.
	This will force all objects to treat the game application as a listen server on the local network. Disabling this define has
	no effect on the engine's HTTPObject and TCPObject classes as they use a different network transmission feed.
**/
#define GALACTIC_USE_NETWORKING 1

//GALACTIC_ALLOW_MODS:
/** 
	This define will allow use of the -mod tag as a command line argument, By default when the
	-mod tag is used, the game will look for the directory named X (-mod 'X') and load main.lua
	in the folder. Usage of .DLL's for modifications is not permitted as it would likely interfere
	with any licensing as set up by the individual developers.

	If you're interested in allowing modders the ability to load in .DLLs with their modifications, then
	have a go at the mod loading code in GalacticMain()
**/
#define GALACTIC_ALLOW_MODS 1

//GALACTIC_DONT_REPORT_INTERNAL_ERRORS
/**
	This define should be enabled for "shipping" builds of games. This will disable the numerous error, warn, etc. calls littering
	extremely commonly used base classes such as the BitStream to save some file space for console logging as well as some internal
	memory from the stored log. You should leave this turned to 0 when developing your project as a debugging tool. Turning this on
	will not disable critical error reporting (cerr(x)) as it still has importance to running of the engine.
**/
#define GALACTIC_DONT_REPORT_INTERNAL_ERRORS 0

//This next section of defines only needs to be used if the Networking module is enabled.
#if GALACTIC_USE_NETWORKING != 0

	//GALACTIC_MAXIMUM_CLIENTS
	/**
		This define is used to declare the maximum amount of simultaneous connections allowed by
		a Galactic Listen Server. A Listen Server is defined as a server in which the hosting client is also
		playing the game on the same executable as the server. This is disabled for Galactic Server builds
	**/
	#define GALACTIC_MAXIMUM_CLIENTS 128   

	//GALACTIC_ALLOW_FILE_TRANSFERS
	/**
		This define is used by the engine to enable or disable the server to client file transfer protocol for mod downloading
		on the client end. Set this to 0 to disable the system, set it to 1 to enable the system. While this define is used for an
		engine level allowment, the actual allowing of transfers of files still lies with the client running the executable and a 
		global variable in the scripting engine may disable this system.
	**/
	#define GALACTIC_ALLOW_FILE_TRANSFERS 1

	//GALACTIC_TRANSFER_FORMATS
	/**
		This define is used by the networking subsystem during client connection to check and see if a client is missing
		"required" files and to transmit them to the client. The file types must be in this list or the file will not
		be allowed to be transfered to the client. This is a space delimited list. This is the ABSOLUTE list of files that
		can be transmitted, regardless of scripts on the client & server. If a format is not on this list, it will not be sent
	**/
	#define GALACTIC_TRANSFER_FORMATS ".png .jpg .lua .gui .mis"

#endif